#!/usr/bin/env python3
import numpy as np

weights1= np.array([[ 6.87918723e-01,  2.85731673e-01,  2.72093713e-01, -2.95957625e-01, 3.63297701e-01, -8.22727919e-01, -6.07454360e-01, -2.40791410e-01, -1.32056668e-01, -7.01611638e-01,  7.56822079e-02, -2.15918899e+00, 1.46163747e-01],
 [-5.34504890e-01, -6.59934342e-01,  1.74876428e+00,  3.44589800e-01, -7.80243635e-01,  6.92900643e-02,  9.48250294e-01,  1.33506656e-01, -6.00891829e-01, -5.37448406e-01, -5.36287427e-01, -1.01573467e+00, -1.20042905e-01],
 [ 9.29522216e-02, -7.30246603e-02,  1.28768101e-01,  7.84026384e-01, 6.81931257e-01,  5.33289969e-01, -5.90979636e-01, -6.46692038e-01, 1.57463342e-01, -1.62567854e-01, -6.63542271e-01, -1.84158310e-01, -3.66728306e-02],
 [-1.23762298e+00, -2.13418677e-02, -8.34690221e-03,  1.31843179e-01, -1.86816901e-01, -3.46290976e-01, -2.04482451e-02, -1.25337346e-02, -9.79659706e-02, -2.49531865e-01, -2.22728942e-02, -4.86165017e-01, 1.20255910e-02],
 [ 5.72559178e-01, -3.74954455e-02,  3.68499875e-01, -4.90089506e-01, -1.37586415e-01,  5.86924613e-01, -1.10815324e-01,  3.25449944e-01, 2.02375367e-01, -2.33922079e-01,  8.39277864e-01,  3.39495957e-01, 1.99936479e-02],
 [ 1.71320832e+00,  1.38785213e-01,  1.77492306e-01, -8.10227692e-01, 5.96704006e-01, -1.48994887e+00, -5.98943055e-01, -4.03756410e-01, 1.13196099e+00, -3.91249537e-01,  3.03012699e-01,  7.25872457e-01, 1.11455344e-01],
 [ 2.61311024e-01, -1.14879394e+00,  8.91858414e-02, -1.93911150e-01, -2.58625865e-01,  4.30506974e-01, -6.17568076e-01,  9.13048238e-02, -9.16751325e-01, -1.80922985e-01,  2.37368539e-01,  9.79987144e-01, 2.89930105e-01],
 [ 7.24849803e-03, -1.04747677e+00, -5.57828844e-01, -7.60206819e-01, -4.89796311e-01,  1.60939798e-01, -3.84084105e-01, -5.81558943e-01, 2.47536317e-01,  2.24719572e+00, -2.94481456e-01,  9.11371946e-01, -1.17006488e-01],
 [-1.29255271e+00,  7.81662524e-01,  1.83665562e+00,  3.01408947e-01, 4.97518718e-01,  8.91391188e-02,  2.93168634e-01,  4.92001623e-01, -3.05086344e-01, -2.71547890e+00, -2.00195640e-01, -6.58171713e-01, -1.22966930e-01],
 [-1.02843356e+00,  6.48731319e-03, -2.69153446e-01, -2.97829390e-01, -8.82253274e-02,  1.60275891e-01, -3.60743254e-01, -2.64924020e-01, -2.34808087e-01, -1.62254676e-01, -3.13772023e-01,  4.37505133e-02, -2.50581443e-01],
 [-9.93525147e-01, -1.56842381e-01,  2.32937813e-01,  7.54859485e-03, -1.92117244e-01, -1.72452044e+00, -2.00600818e-01, -3.43528539e-01, 4.29290272e-02, -3.89625086e-03,  4.96833414e-01,  6.95914805e-01, 4.93172318e-01],
 [ 1.70956802e+00,  6.14573061e-01,  2.27360241e-02, -7.84413278e-01, 8.01870883e-01, -6.66760325e-01, -6.61275864e-01, -6.46325722e-02, -7.89792389e-02,  1.02748299e+00,  5.76395512e-01,  5.64172864e-01, 2.49106243e-01],
 [-5.60157478e-01, -1.04096603e+00, -5.33738196e-01, -6.34033024e-01, -1.71401590e-01,  1.20048799e-01, -3.78723532e-01,  4.10468519e-01, 1.52235770e+00,  2.53906339e-01, -1.73355520e-01, -6.15910709e-01, 1.48364186e-01],
 [-8.07519138e-01,  6.40346017e-03,  6.17996395e-01,  4.82329607e-01, 1.83108509e-01,  7.75562897e-02,  2.51292199e-01,  4.61938903e-02, -9.82816219e-02,  7.94883072e-01, -3.15858990e-01, -1.21776462e-01, 4.68637800e+00]])
biases1= np.array([-0.042427,    0.30794835,  0.8276186,  -0.22598106, -0.6798314,   1.9097325, 0.2548694,  -0.12641504,  1.4892297,   0.6397255,   0.60840744, -0.6277221, 0.9128965 ])
weights2= np.array([[ 0.3720661,  -0.26647076, -0.46012768, -0.90289503,  0.20164554,  2.769391, -1.0082287,   0.24905029,  0.0854466,  -0.4885909 ],
 [ 0.4070742,   0.57080597,  1.1167747,   0.44450942, -0.54646075,  1.1520872, 0.4202589,  -1.1264579,  -1.1163003,  -3.6452425 ],
 [ 0.72467995,  0.8821511,  -0.76536226,  0.2615602,  -0.25225076, -0.6971937, -0.18911794,  0.14216708, -0.09995791, -1.1726552 ],
 [ 0.25145784,  0.78935987, -0.71166945, -2.9125822,   0.64231503,  1.0296923, -0.8525075,   0.05241609,  0.31064075, -1.6056986 ],
 [-0.05480928, -1.6288733,   1.2892901,   1.1753988,   0.77541286, -1.8517561, -0.02108207,  0.7488842,   0.2888292,  -3.8850458 ],
 [-0.44721928,  0.42440987,  0.09953576, -0.2577574,   0.07983711, -0.3523667, -0.47871244,  0.7740749,  -0.36891,    -0.36807102],
 [-0.55302614,  0.7918908,   2.0086005,  -2.1280699,  -0.7920544,  -0.14853722, -0.7777896,  -0.62881905,  0.07000995,  0.10398975],
 [ 0.86978936,  0.33848155,  0.10255975,  2.0281296,  -0.597118,   -2.7580814, -0.23542799,  0.8325755,  -0.9094285,   0.73199105],
 [ 0.91688365, -0.6603169,   0.41501164, -2.8995523,   0.26734647, -1.5439361, -0.67930466, -0.32305703, -1.4387845,   1.0547562 ],
 [-0.29272074,  0.2346301,   0.27301002,  0.9355449,   1.2192575,   0.5147319, 0.5336654,   0.13678221, -0.07292163,  0.04129366],
 [ 0.25224704,  0.8082936,  -0.99272144,  1.2095158,   0.788193,   -1.9167684, -0.15002556,  0.590419,    0.7450384,  -0.5850728 ],
 [ 0.21610828, -0.3298381,  -0.33609065, -0.67483056,  0.03519897,  1.5396111, -0.34610182,  0.82987815, -0.44989237, -1.2235742 ],
 [-1.4638306,   0.10932249,  1.3301675,   2.024169,   -0.5825773,   1.3688421, 1.6890492,   0.5109491,   0.05892388,  0.2063122 ]])
biases2= np.array([-1.1921995,   0.00678477, -0.41330236, -0.8651275,  -0.61142576, -1.6437662, -0.6649396,  -0.8196685,  -1.3141593,   0.00837694])
weights3= np.array([[-1.70781827e+00,  1.54971337e+00, -1.29056823e+00, -3.20381433e-01, -1.42125702e+00,  5.10120511e-01,  1.43155292e-01,  1.99435985e+00, -4.07314906e-03,  1.48155868e+00],
 [-7.05228448e-01,  1.55226350e+00, -1.06917810e+00,  6.73211515e-01, -2.81785131e-01, -6.89408839e-01, -1.82757139e-01,  2.14037895e+00, -3.89115722e-03,  4.31124091e-01],
 [ 1.05885291e+00, -3.12067914e+00, -7.79744327e-01, -1.84947348e+00, 1.03979468e-01, -5.17882109e-01, -2.61755913e-01,  2.43305039e+00, -1.26120625e-02,  9.46246564e-01],
 [-6.11967593e-02,  9.48128998e-01,  7.86299527e-01, -1.23687375e+00, 1.36735785e+00,  3.56792033e-01, -1.79551971e+00, -9.03806865e-01, 3.73963802e-03,  4.55730319e-01],
 [ 1.00476122e+00, -7.33954310e-01, -3.39058757e-01,  7.14643121e-01, 1.16645575e+00, -1.22845268e+00,  1.81504285e+00, -9.44347084e-01, 3.98305766e-02,  1.08585215e+00],
 [ 3.73247057e-01, -1.55214861e-01, -1.37313330e+00,  9.54109788e-01, -7.40548790e-01,  6.26696944e-01, -1.01236069e+00, -2.10132957e+00, -2.87728030e-02,  2.01969552e+00],
 [ 5.65296888e-01, -2.25748086e+00, -4.95296896e-01,  7.22560644e-01, -1.28613484e+00,  2.83954293e-01,  1.51946080e+00,  1.22871852e+00, -1.66456439e-02,  5.54359496e-01],
 [ 1.18844533e+00, -1.45284450e+00, -3.16271961e-01,  5.75516745e-02, 8.71534288e-01,  1.25492775e+00, -5.13577163e-01,  2.13318348e+00, -3.27023095e-04,  9.25489306e-01],
 [-1.10699093e+00, -2.52471542e+00, -1.76957643e+00,  1.89626837e+00, -6.27420191e-03, -4.17644411e-01,  9.02033627e-01, -1.24555421e+00, -5.75406151e-03, -1.42914128e+00],
 [ 4.51706320e-01, -4.30645794e-01,  2.02487018e-02, -9.35851574e-01, 3.96513551e-01, -3.05515856e-01, -3.51455122e-01, -3.98808026e+00, -5.20381669e-04,  8.08805585e-01]])
biases3= np.array([-0.8544182,   1.8609318,  -0.54531604,  0.37229827,  1.494132,   -0.08355652, 0.22013542, -0.25558177, -0.02437603,  0.62113327])
weights4= np.array([[ 0.7093898 ], [-0.7054975 ], [-1.0555365 ], [ 0.7008866 ], [ 0.916838  ], [ 0.9515945 ], [ 0.52943987], [-0.5823847 ], [ 0.00400778], [-0.7866541 ]])
biases4= np.array([-0.01083925])
mean = np.array([  13.04789538,   23.72869385,   40.67558462,   15.29521538,   19.52276923, 67.5286,       50.83712308, 1017.30384462, 1014.90884308,    4.42447692, 4.49933846,   17.69405385,   22.23012615,    2.61376615])
std = np.array([ 6.51633549, 7.16601579, 13.46707212, 8.61310639, 8.60136868, 19.14732391, 20.92438644, 7.0088025, 6.96373723, 2.87348959, 2.71029369, 6.66281739, 7.02408722, 9.32835189])

input1 = np.array([ 17.5,32.3,41,7,20,82,33,1010.8,1006,7,8,17.8,29.7,1 ])
input1 -= mean
input1 /= std

def layer(weights, biases, inputs):
    output = np.zeros(len(weights[0]))
    for i,x in enumerate(weights):
        for j,y in enumerate(x):
            output[j] += inputs[i] * y
    output += biases
    output = np.tanh(output)
    return output


def mymodel(inputs):
    output1 = layer(weights1, biases1, inputs)
    output2 = layer(weights2, biases2, output1)
    output3 = layer(weights3, biases3, output2)
    output4 = layer(weights4, biases4, output3)
    return output4

print(mymodel(input1))
