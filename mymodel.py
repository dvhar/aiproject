#!/usr/bin/env python3
from numpy import array
import numpy as np

mean = array([  13.33167 ,   24.1295  ,    2.111214,    5.44271 ,    7.70231 ,
         40.54054 ,   15.21604 ,   19.5547  ,   66.207   ,   49.68046 ,
       1017.364562, 1014.910554,    4.24522 ,    4.32384 ,   18.082382,
         22.631268])
std = array([ 6.47057667,  6.97772852,  6.91440907,  3.68621004,  3.7643035 ,
       13.37275576,  8.57001323,  8.5625001 , 18.64969252, 20.22276821,
        6.9355676 ,  6.90179333,  2.80227178,  2.65048065,  6.60978685,
        6.83962159])
weights1 = array([[ 6.45643532e-01, -9.63457346e-01,  1.76809239e+00,
        -9.70067363e-03,  7.11071551e-01,  1.82055190e-01,
        -1.12013376e+00,  2.19051790e+00,  2.71049172e-01,
        -5.76085269e-01,  1.56588390e-01, -1.73168004e-01],
       [-1.00242269e+00,  2.76158690e-01,  1.60781229e+00,
        -4.31503624e-01, -1.76437092e+00, -4.13600981e-01,
         8.53038430e-01,  6.12768984e+00, -2.14649200e-01,
        -1.11291122e+00, -5.93778901e-02,  1.15573116e-01],
       [-1.14199957e-02, -3.18896957e-03, -6.23478770e-01,
         3.84582192e-01, -7.64692724e-02, -2.16829753e-03,
         1.14668623e-01,  6.04289532e-01, -8.85158122e-01,
        -2.62542039e-01, -5.02814837e-02, -3.60135484e+00],
       [ 1.73737979e-04,  2.08113203e-03, -1.94221914e+00,
        -3.07834953e-01, -4.57749218e-02, -2.52397787e-02,
        -2.47792214e-01,  5.85016549e-01,  4.59299535e-01,
         4.91340727e-01, -5.20639658e-01, -6.73732441e-03],
       [ 1.11259317e+00, -1.47763646e+00, -1.75905883e+00,
         3.82847905e-01,  8.21204126e-01,  1.28890604e-01,
         1.46759748e+00,  3.95943254e-01,  1.19846487e+00,
        -4.17890728e-01, -8.67014289e-01, -4.12497409e-02],
       [-2.79484898e-01,  6.18456602e-01, -7.21200764e-01,
         3.33060659e-02,  3.63948911e-01, -7.14054525e-01,
        -1.52253544e+00,  1.05911863e+00,  4.53554243e-02,
         8.99600506e-01, -3.13020736e-01,  1.56745300e-01],
       [-1.67430684e-01, -2.47255147e-01, -7.21271813e-01,
         3.16722617e-02, -9.26177323e-01,  8.66742954e-02,
         2.63113797e-01, -3.13556731e-01, -6.84349835e-02,
        -1.70318872e-01,  6.06062412e-02, -9.35514644e-02],
       [ 4.23440635e-02, -6.82881296e-01, -5.35999775e-01,
        -9.94463682e-01,  2.42659952e-02,  1.85934111e-01,
         1.06717157e+00, -4.36788172e-01,  1.78750604e-01,
        -4.79486495e-01,  5.72929323e-01, -4.17240448e-02],
       [-1.03717960e-01, -1.25557208e+00, -1.77441692e+00,
        -1.57084823e-01,  1.16397634e-01, -2.12309316e-01,
        -1.52082098e+00, -7.35856116e-01, -6.36587024e-01,
        -4.93691266e-01,  2.72048324e-01,  4.36010063e-01],
       [-4.61494714e-01,  1.61531067e+00, -1.12341905e+00,
        -1.14743635e-01,  2.44916379e-01, -6.70347214e-01,
        -1.17005157e+00, -5.51996052e-01,  1.75027943e+00,
        -9.17248428e-01,  1.79361969e-01, -7.91067123e-01],
       [-5.89264184e-02,  1.89985764e+00, -3.30533803e-01,
         1.56033301e+00, -3.71410847e-02, -1.11413145e+00,
         3.42841196e+00,  2.37849879e+00, -1.61131549e+00,
         6.92194462e-01,  3.07684392e-01, -6.94592953e-01],
       [-3.97033274e-01, -1.72747493e+00,  9.20504570e-01,
        -2.45264077e+00, -1.58005580e-01,  1.19726682e+00,
        -4.08437061e+00, -4.51463252e-01,  1.44005346e+00,
        -1.21325648e+00, -9.94556367e-01,  1.04893363e+00],
       [ 3.24386954e-01, -1.02898049e+00, -7.44092345e-01,
         8.14210176e-02,  6.54909372e-01, -5.49574867e-02,
         3.82729828e-01,  1.77051038e-01,  3.15615445e-01,
         7.59306774e-02, -2.25023404e-01,  2.04798430e-02],
       [-5.91784775e-01,  5.60818136e-01,  1.33564091e+00,
         4.42640275e-01, -4.98469591e-01, -1.48114329e-02,
        -1.54521078e-01,  4.91245359e-01, -1.06871594e-03,
        -1.51872277e-01,  3.63567136e-02, -3.11618298e-01],
       [-4.81595844e-01,  3.62727374e-01, -2.02235126e+00,
         1.13879919e+00,  5.44799447e-01,  3.59480441e-01,
        -2.19709253e+00, -1.26084125e+00,  3.97804648e-01,
        -3.20497096e-01,  9.57984447e-01,  1.45355105e-01],
       [ 7.03093171e-01,  2.19555140e+00,  2.32771590e-01,
        -5.46882510e-01, -3.16585839e-01, -9.44449753e-02,
         1.02561772e+00, -2.43555474e+00, -1.68524206e+00,
         6.32705629e-01, -6.03264477e-03, -3.39234382e-01]])
biases1 = array([ 0.82529473, -1.3720163 ,  0.2750293 ,  0.9983479 , -1.0934781 ,
        0.10039275,  1.195865  , -0.0169324 , -1.0730325 ,  0.46048495,
        0.7562547 , -0.20077479])
weights2 = array([[ 5.93160808e-01, -1.36961305e+00,  4.95665193e-01,
        -1.71276736e+00,  1.72553611e+00,  3.00614643e+00,
        -7.24277794e-02,  1.64168429e+00, -3.97386342e-01,
         2.31104660e+00],
       [-6.82890490e-02, -3.11363935e-01, -2.55596608e-01,
         1.84302902e+00,  2.35681236e-01,  1.42194486e+00,
        -9.51829553e-02, -4.18545842e-01, -5.91862500e-01,
        -4.61923599e+00],
       [ 2.85693556e-01,  7.65053868e-01,  8.83267596e-02,
        -6.54829806e-03, -2.05208033e-01,  1.27340949e+00,
        -3.60134542e-01,  7.56924272e-01,  6.14091754e-01,
         2.62372613e+00],
       [-4.97146010e-01,  6.06889188e-01,  3.79822552e-01,
        -2.18895242e-01, -2.13341311e-01, -2.70142525e-01,
        -1.22114623e+00,  7.58707374e-02,  1.58767179e-01,
         1.06081486e-01],
       [ 5.41134119e-01,  1.91513732e-01,  1.35702878e-01,
         9.24998879e-01,  9.41298842e-01, -1.95843384e-01,
        -3.73779029e-01, -2.44821250e-01, -8.71932089e-01,
        -4.12234873e-01],
       [ 1.64041400e-01, -9.78174508e-01,  1.51007092e+00,
         8.73809457e-02,  6.25341415e-01, -1.94047794e-01,
         1.17857337e+00,  3.96102339e-01, -2.97067259e-02,
         1.30016327e+00],
       [ 6.96399987e-01, -1.40238917e+00, -2.69905657e-01,
         1.09616947e+00,  3.78486633e-01,  1.93987727e-01,
        -9.59917486e-01, -9.05904830e-01,  1.07156205e+00,
         7.69579530e-01],
       [-1.84877560e-01, -4.02246058e-01,  1.61411688e-01,
        -9.60786045e-01,  6.18698716e-01,  3.25397468e+00,
        -3.14353406e-02, -2.50049263e-01, -4.54205662e-01,
        -1.60030353e+00],
       [-8.05153906e-01,  2.84865260e-01,  6.48411036e-01,
         2.98987317e+00, -4.68527675e-01, -4.94492101e-03,
        -2.90062100e-01, -5.67433052e-02,  4.19598520e-01,
         4.68947709e-01],
       [ 7.13115215e-01, -6.40820146e-01, -1.01402469e-01,
         1.10159791e+00, -7.34776020e-01,  1.91567743e+00,
         2.60068327e-01,  7.33976066e-01, -4.22191292e-01,
         6.47640085e+00],
       [ 2.17589792e-02, -6.68484151e-01, -5.04729509e-01,
        -4.78986464e-02,  7.61762932e-02, -1.86956728e+00,
        -3.77774030e-01,  1.67968071e+00,  2.27533787e-01,
         4.19593692e-01],
       [ 1.37484774e-01,  2.68440563e-02,  3.06349814e-01,
        -3.35993081e-01,  4.20104116e-01,  2.08070680e-01,
        -5.24234116e-01, -1.23129249e+00,  2.43643671e-01,
        -1.20488119e+00]])
biases2 = array([ 1.2961175 , -2.6768558 ,  1.20781   , -1.3248464 , -0.8064685 ,
        1.627291  ,  0.306408  , -0.9507686 ,  0.14499632, -0.3032481 ])
weights3 = array([[-21.270105  ,   1.4351612 ,  -7.158609  ,  21.758484  ,
          1.8592988 ,  -8.222575  ,  -0.72693723,  15.72702   ,
         -3.9287038 ,   4.674884  ],
       [ -4.6457534 ,  -6.9259386 , -22.818554  ,   0.3362722 ,
          0.43126425,   1.6513516 ,   0.59661704,  -2.9195063 ,
          2.7597132 ,  11.9514065 ],
       [  4.6435695 , -19.117552  ,  -9.200447  ,  -7.815111  ,
         32.47713   , -13.8045025 ,  -1.5908961 ,  -5.8322654 ,
         -0.18492524,   4.116007  ],
       [  1.097475  ,  26.566353  ,  -3.1869986 ,   8.028461  ,
          8.2807045 ,   3.8965287 ,   0.9665762 ,  -0.89514446,
          0.07216647,   0.38491338],
       [ 19.260351  ,   4.746919  , -17.321856  ,   7.374079  ,
         16.478027  ,  13.510525  ,  -3.5700965 ,   4.8100886 ,
          1.1808091 ,  -9.758906  ],
       [ 11.262507  , -15.031043  , -11.895069  , -12.384964  ,
        -11.507257  ,   2.3685122 ,   7.8078856 ,  13.523324  ,
         -0.33849487,   1.7489312 ],
       [  5.431256  ,  10.088499  , -13.454983  ,  -8.821843  ,
         -1.9634678 , -13.00748   ,   4.488236  ,  -7.9356747 ,
          1.1367382 , -16.343939  ],
       [-19.503384  ,   8.105688  , -13.428127  ,   7.8522534 ,
        -20.102606  ,   6.0898237 ,   1.9503146 ,  -5.6278367 ,
         -0.11541429,   0.36759457],
       [-14.153547  ,  -0.67598516,  -5.8627014 ,  -9.467648  ,
         -6.313269  ,  -3.0160544 ,   0.2589124 ,  12.661937  ,
         -1.6553093 , -17.122713  ],
       [ 18.574797  , -11.397235  ,  11.162157  , -11.318943  ,
          9.414481  ,  12.011156  ,  -4.314422  ,   3.4499893 ,
          0.5045682 ,   6.553666  ]])
biases3 = array([-11.920873 ,   3.744051 , -17.048018 ,   3.931776 , -10.188    ,
         4.7354946,  -4.587747 ,   1.0950375,  -2.800368 ,  -1.7277385])
weights4 = array([[-0.68671393],
       [ 0.54768765],
       [ 0.5466787 ],
       [ 0.403372  ],
       [-0.39788824],
       [ 0.45240512],
       [ 0.7377686 ],
       [-0.64855045],
       [ 1.5227762 ],
       [ 0.51078427]])
biases4 = array([0.67330146])


input1 = np.array([17.9,35.2,0,12,12.3,48,6,20,20,13,1006.3,1004.4,2,5,26.6,33.4])
input1 -= mean
input1 /= std

def layer(weights, biases, inputs):
    output = np.zeros(len(weights[0]))
    #multipyly by weights
    for i,x in enumerate(weights):
        for j,y in enumerate(x):
            output[j] += inputs[i] * y
    #add the bias
    output += biases
    #activation for tanh layers
    if len(output) > 1:
        output = np.tanh(output)
    #activation for last layer
    else:
        output = 1/(1+np.exp(-output))
    return output


def mymodel(inputs):
    output1 = layer(weights1, biases1, inputs)
    output2 = layer(weights2, biases2, output1)
    output3 = layer(weights3, biases3, output2)
    output4 = layer(weights4, biases4, output3)
    return output4

print(mymodel(input1))
