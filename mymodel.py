#!/usr/bin/env python3
from numpy import array
import numpy as np

weights1 = array([[ 5.34209013e-01, -8.95046473e-01,  1.45265388e+00,
         1.84075996e-01,  2.98213542e-01,  8.50871578e-02,
        -9.86102998e-01,  1.77111781e+00,  1.33763015e-01,
        -4.76677477e-01,  1.69503093e-01,  1.83467884e-02],
       [-1.20123541e+00,  8.34099412e-01,  1.64973760e+00,
        -7.60477409e-02, -1.64775181e+00, -1.06164627e-01,
         3.72993439e-01,  4.65366602e+00, -3.20010811e-01,
        -9.47004974e-01, -1.09128095e-01, -2.46953219e-01],
       [-1.62154920e-02, -4.00522426e-02, -3.56730133e-01,
         3.15490395e-01, -1.15424901e-01,  1.88840423e-02,
         1.61056488e-03,  5.03359973e-01, -7.51356483e-01,
        -2.91820228e-01,  9.48624127e-03, -3.78116989e+00],
       [-4.85228412e-02,  5.39277010e-02, -1.44853115e+00,
        -2.35959366e-01,  2.99647022e-02, -7.10308971e-03,
        -5.98965771e-03,  3.71286541e-01,  3.34189743e-01,
         4.06532705e-01, -3.33148897e-01, -7.00375587e-02],
       [ 1.22552335e+00, -1.58751106e+00, -1.09999943e+00,
         3.26432437e-01,  8.22131932e-01,  4.71564271e-02,
         1.16003072e+00,  2.56250829e-01,  9.52891409e-01,
        -3.14612359e-01, -7.13390589e-01,  2.17842773e-01],
       [-4.26485687e-01,  4.29406464e-01, -6.71646953e-01,
        -1.33853883e-01,  2.94615597e-01, -7.14998782e-01,
        -1.15174806e+00,  8.50704610e-01,  2.53487006e-02,
         9.05497193e-01, -2.02220246e-01,  2.33770907e-01],
       [-2.00160921e-01, -1.72327667e-01, -5.59365034e-01,
         1.38799980e-01, -9.28134561e-01,  1.04602747e-01,
         2.15285972e-01, -1.27573371e-01, -3.34041044e-02,
        -5.99147566e-02, -3.44839692e-02, -1.92079052e-01],
       [ 4.93589751e-02, -8.52420568e-01, -2.91522413e-01,
        -8.59663904e-01,  6.36623576e-02,  2.11542100e-01,
         6.75567865e-01, -2.80736566e-01,  8.93672779e-02,
        -5.05647361e-01,  6.07414305e-01, -5.72739355e-02],
       [-1.28369123e-01, -1.35381186e+00, -1.24398708e+00,
        -1.66075140e-01,  1.56778321e-01, -1.34189054e-01,
        -8.14807534e-01, -4.80622858e-01, -4.81403500e-01,
        -4.10735726e-01,  1.65055588e-01,  4.53106642e-01],
       [-5.88439941e-01,  1.58169675e+00, -9.96561885e-01,
        -1.56810388e-01,  1.68292925e-01, -6.30602777e-01,
        -1.07368743e+00, -1.72810212e-01,  1.45494342e+00,
        -1.19223583e+00,  8.14643949e-02, -8.63414645e-01],
       [-2.73321122e-01,  2.09315729e+00,  1.10179730e-01,
         1.37383187e+00, -1.99673578e-01, -1.03302729e+00,
         2.73421860e+00,  2.14801860e+00, -1.46647692e+00,
         5.51909387e-01,  4.83816862e-01, -1.13469231e+00],
       [-3.00397456e-01, -1.95491004e+00,  2.98812568e-01,
        -2.13020086e+00, -8.34678262e-02,  1.19806254e+00,
        -3.25280786e+00, -7.28284895e-01,  1.31697214e+00,
        -1.03427541e+00, -1.00300181e+00,  1.31956720e+00],
       [ 3.42331797e-01, -1.14022660e+00, -4.14480954e-01,
        -1.64370388e-01,  8.07778180e-01, -7.45569095e-02,
         2.12218240e-01,  5.56408167e-02,  2.26320192e-01,
         4.99987267e-02, -1.88710243e-01,  1.92463815e-01],
       [-6.83935285e-01,  8.02994907e-01,  9.36592042e-01,
         5.19392431e-01, -6.35630369e-01, -5.48486337e-02,
        -1.61461443e-01,  4.21857506e-01, -3.65329441e-04,
        -1.97145846e-02,  8.12518448e-02, -2.71610141e-01],
       [-1.24022745e-01,  9.28761736e-02, -1.54066515e+00,
         9.92586911e-01,  9.74119484e-01,  2.12719589e-01,
        -9.60013092e-01, -9.67161000e-01,  5.12503147e-01,
        -3.08524072e-01,  6.86534882e-01,  3.02996904e-01],
       [ 6.43222392e-01,  1.95680261e+00, -5.31545639e-01,
        -8.72620225e-01, -5.92355192e-01, -1.32283196e-01,
         3.75327498e-01, -2.01747918e+00, -1.23859692e+00,
         3.79690051e-01,  4.76406962e-02, -3.89613837e-01]])
biases1 = array([ 0.88841605, -1.3078891 ,  0.32492903,  1.1261089 , -0.98807275,
        0.06147747,  0.9094265 , -0.28217208, -0.90448016,  0.5093777 ,
        0.717771  , -0.2291227 ])
weights2 = array([[ 3.0880064e-01, -1.4883579e+00,  7.3055959e-01, -1.8166616e+00,
         1.8548278e+00,  2.7565444e+00,  3.7212675e-03,  1.8459727e+00,
        -4.8887852e-01,  1.7568924e+00],
       [-8.7551989e-02, -1.3959306e-01, -2.1225508e-01,  1.7279129e+00,
        -6.8303116e-02,  1.4448398e+00, -8.8954612e-04, -3.4107360e-01,
        -5.0547260e-01, -3.4755707e+00],
       [ 4.3111873e-01,  6.6959894e-01,  2.7398387e-01,  3.4718003e-02,
        -1.9114850e-01,  1.1543219e+00, -4.6504843e-01,  6.4827704e-01,
         5.5771273e-01,  2.8052502e+00],
       [-5.4685497e-01,  3.7461999e-01,  4.7401482e-01, -3.0717486e-01,
        -1.9820853e-01, -6.1665589e-01, -1.2226967e+00,  1.5102966e-01,
         1.0286431e-02,  1.2398263e-01],
       [ 6.2371254e-01,  8.9910284e-02,  1.5689197e-01,  7.1512210e-01,
         8.7964749e-01, -5.6796890e-02, -2.5609761e-01, -3.0060637e-01,
        -1.0985390e+00, -6.1019666e-02],
       [ 1.5527037e-01, -7.6619369e-01,  1.4975076e+00,  1.7094273e-02,
         5.7251412e-01, -7.8826703e-02,  1.4291648e+00,  1.5133540e-01,
         2.3448689e-01,  1.0481236e+00],
       [ 8.7106425e-01, -9.8477870e-01, -3.0067307e-01,  1.0744386e+00,
         5.2056009e-01, -2.5611283e-02, -7.7864587e-01, -1.3012367e+00,
         1.0048138e+00,  7.2934169e-01],
       [-3.0101955e-01, -3.7310332e-01,  8.2702532e-02, -6.9151896e-01,
         8.8570249e-01,  3.4312863e+00,  3.6732562e-02, -3.5930642e-01,
        -4.4847333e-01, -1.5309244e+00],
       [-9.8005748e-01,  5.8018040e-02,  9.4961417e-01,  3.2650280e+00,
        -5.5192506e-01, -1.8368603e-01, -4.0030847e-03,  1.2451796e-01,
         4.4693005e-01,  7.4644595e-01],
       [ 6.0544670e-01, -4.4944298e-01,  3.3636447e-02,  1.1082079e+00,
        -9.8155969e-01,  2.1868544e+00,  8.6946569e-02,  7.7854002e-01,
        -1.9713242e-01,  5.7970047e+00],
       [ 6.8716832e-02, -5.2137232e-01, -5.7611638e-01,  2.3202369e-01,
        -2.2612104e-02, -1.7493790e+00, -2.4238239e-01,  1.6302518e+00,
         2.7044818e-01,  1.0146044e+00],
       [ 1.2654515e-01, -7.1766078e-03,  1.7826678e-01, -4.8017687e-01,
         6.0418260e-01,  3.4914860e-01, -3.8287735e-01, -1.0642160e+00,
         1.5261632e-01, -9.4131160e-01]])
biases2 = array([ 1.2161971, -2.0616686,  1.280958 , -1.7305108, -0.9106966,
        1.8217641,  0.4925954, -1.0359846,  0.2742396,  0.0740294])
weights3 = array([[-17.155828  ,   4.935326  ,  -5.142894  ,  13.9522505 ,
          3.5775325 ,  -4.1793137 ,  -0.42671797,   6.519869  ,
         -2.134976  ,   2.1680384 ],
       [ -2.95278   ,  -4.955811  , -22.007006  ,  -1.3009642 ,
         -2.6653748 ,   0.3150456 ,   0.8007593 ,  -2.1696293 ,
          2.4702191 ,   5.0771084 ],
       [ -2.9925811 , -12.75656   , -10.456117  ,  -4.0660477 ,
         21.899284  ,  -8.756463  ,  -1.5770049 ,  -2.50315   ,
         -0.34794217,   3.3418505 ],
       [  4.0810084 ,  23.341894  ,  -1.3311462 ,   5.713381  ,
          7.893549  ,   3.7597547 ,   1.7952603 ,   0.22098747,
         -0.12452625,  -0.42832017],
       [ 16.863579  ,  -0.3585472 , -12.49731   ,   4.9104557 ,
         12.9543085 ,   7.130366  ,  -2.1706865 ,   1.0947511 ,
          1.8146503 ,  -5.375758  ],
       [  8.312426  , -12.058722  , -10.514286  ,  -7.626865  ,
        -10.163602  ,   1.7982177 ,   5.707538  ,   4.7636924 ,
         -0.527235  ,   1.3048736 ],
       [  5.6009865 ,   7.8922777 , -10.288248  ,  -4.641373  ,
          0.5463501 ,  -8.870511  ,   3.0231738 ,  -4.154276  ,
          0.52395064,  -7.5480876 ],
       [-18.665462  ,   8.177085  , -12.706603  ,   4.8108115 ,
        -15.158948  ,   4.2713914 ,   1.7894729 ,  -1.4649208 ,
         -0.15784052,  -0.8293601 ],
       [-13.238311  ,  -0.28      ,  -3.359858  ,  -7.007764  ,
         -3.401407  ,  -2.7807713 ,   0.6911861 ,   4.1565647 ,
         -1.0049437 ,  -7.8104787 ],
       [ 14.044104  , -10.814798  ,   9.818592  ,  -6.7357635 ,
          7.223745  ,   7.6470294 ,  -3.340857  ,   0.31387925,
          0.3500523 ,   3.4519353 ]])
biases3 = array([ -5.7912903 ,   1.9614879 , -13.450413  ,   3.0170488 ,
        -7.398215  ,   0.52788043,  -2.2810602 ,  -0.38958913,
        -1.5437034 ,  -2.1054974 ])
weights4 = array([[-0.7878898 ],
       [ 0.60567534],
       [ 0.56030196],
       [ 0.423287  ],
       [-0.43962935],
       [ 0.51950365],
       [ 0.85995394],
       [-0.66963047],
       [ 2.291659  ],
       [ 0.537115  ]])
biases4 = array([1.4450057])

mean = array([  13.354232,   24.150788,    2.12356 ,    5.453646,    7.71378 , 40.55936 ,   15.2506  ,   19.5779  ,   66.17202 ,   49.6662  , 1017.32286 , 1014.86992 ,    4.24212 ,    4.3235  ,   18.105188, 22.651848])
std = array([ 6.45937146,  6.97795633,  7.01497348,  3.68121408,  3.76292196, 13.37602319,  8.57281515,  8.56934371, 18.63856618, 20.2395281 , 6.93047749,  6.89230844,  2.80400034,  2.65153687,  6.60140911, 6.84046918])


input1 = np.array([17.9,35.2,0,12,12.3,48,6,20,20,13,1006.3,1004.4,2,5,26.6,33.4])
input1 -= mean
input1 /= std

def layer(weights, biases, inputs):
    output = np.zeros(len(weights[0]))
    #multipyly by weights
    for i,x in enumerate(weights):
        for j,y in enumerate(x):
            output[j] += inputs[i] * y
    #add the bias
    output += biases
    #activation for tanh layers
    if len(output) > 1:
        output = np.tanh(output)
    #activation for last layer
    else:
        output = 1/(1+np.exp(-output))
    return output


def mymodel(inputs):
    output1 = layer(weights1, biases1, inputs)
    output2 = layer(weights2, biases2, output1)
    output3 = layer(weights3, biases3, output2)
    output4 = layer(weights4, biases4, output3)
    return output4

print(mymodel(input1))
